{"version":3,"sources":["testPath.js","SVGCanvas.js","Slider.js","Toggle.js","Settings.js","App.js","serviceWorker.js","index.js"],"names":["testPath","equal","require","SVGCanvas","state","inputPaths","outputPolygons","c","cg","outputDrawing","React","createRef","componentDidMount","bind","drawResult","processPath","drawGrid","handleDrop","handleDragOver","handleDragExit","updateBlob","this","SVG","addTo","size","props","width","height","attr","prevProps","e","stopPropagation","preventDefault","setState","isDragOver","s","paths","find","pathStrings","console","log","length","i","p","push","node","attributes","d","nodeValue","ev","dataTransfer","items","kind","file","getAsFile","type","text","then","parseSVG","clear","enableGrid","resY","y","polygon","resX","x","path","points","toPoly","samples","_array","roundedPoints","orthogonalPoints","intervalX","intervalY","Math","round","result","currentPoint","previousPoint","newPoint","join","svgData","current","innerHTML","svgBlob","Blob","handleSVGBlob","results","polygons","map","poly","key","style","stroke","className","data-dragover","onDrop","onDragOver","onDragExit","onDragEnter","handleDragEnter","id","ref","Component","Slider","valueStyle","left","value","max","htmlFor","title","onChange","changeHandler","name","min","step","Toggle","checked","Settings","handleChange","resultToFile","setting","target","getAttribute","updateSetting","svgUrl","URL","createObjectURL","downloadLink","document","createElement","href","download","body","appendChild","click","removeChild","settings","onClick","App","updateWindowDimensions","window","addEventListener","removeEventListener","innerWidth","innerHeight","blob","prevState","error","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","getElementById","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.08f95ff5.chunk.js","sourcesContent":["const testPath = 'M553.44,72.65q-3.29,33.3-4.38,60t-1.12,55.85v1.79q0,6-5.5,5.95T537,190.3v-1.79Q537,98.79,482,64.05t-179-34.77q-91.23,0-139.52,20.5t-48.3,58.51q0,20.82,19.75,37.74t62.61,32.38q20.83,7.14,49.42,14.87t94.47,22.58q65.89,14.83,96.62,23.77T492,257.44q40.62,15.45,59.83,34.17T571,332.9q0,49.34-68.64,81.7T331.61,447q-73.61,0-128-3.58T75.68,429.16c-4.38-.39-7.33-1-8.76-1.77a4.29,4.29,0,0,1-2.19-4.16V349.54q-1.14-39.21-1.12-55V271.11q0-5.92,6-5.93t6,5.93q0,86.77,62.61,128.36t193.32,41.58q83.39,0,128.47-20.79t45.05-59.43q0-20.77-19.26-38T426,290.71q-19.77-7.11-47.23-14.55t-95.55-22.87Q218.44,239,186.06,230.12t-56.53-17.84q-42.84-16-63.19-34.74t-20.29-41.3q0-49.93,73-81.41t184-31.5q60.33,0,112.57,3.26T542.44,38.78c5.14.8,8.23,1.6,9.34,2.37a8.51,8.51,0,0,1,2.73,4.16v7.13C554.51,55.63,554.15,62.35,553.44,72.65Z'\r\n\r\nexport {testPath};","import React from 'react';\r\nimport './css/SVGCanvas.css'\r\nimport { SVG } from '@svgdotjs/svg.js'\r\nimport '@svgdotjs/svg.topoly.js'\r\nimport { testPath } from './testPath.js';\r\n\r\nconst equal = require('fast-deep-equal/es6/react');\r\n\r\nexport default class SVGCanvas extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            inputPaths: [testPath],\r\n            outputPolygons: []\r\n        }\r\n        this.c = null;\r\n        this.cg = null;\r\n        this.outputDrawing = React.createRef()\r\n        this.componentDidMount = this.componentDidMount.bind(this)\r\n        this.drawResult = this.drawResult.bind(this)\r\n        this.processPath = this.processPath.bind(this)\r\n        this.drawGrid = this.drawGrid.bind(this)\r\n        this.handleDrop = this.handleDrop.bind(this)\r\n        this.handleDragOver = this.handleDragOver.bind(this)\r\n        this.handleDragExit = this.handleDragExit.bind(this)\r\n        this.updateBlob = this.updateBlob.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        this.c = SVG().addTo('#workDrawing');\r\n        this.cg = SVG().addTo('#drawing').size(this.props.width, this.props.height).attr('class', 'grid')\r\n        this.drawGrid();\r\n        this.drawResult();\r\n        this.updateBlob()\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        this.drawGrid();\r\n        if (!equal(this.props, prevProps)) {\r\n            this.drawResult();\r\n            this.updateBlob()\r\n        }\r\n    }\r\n\r\n    handleDragOver(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault()\r\n        this.setState({isDragOver: true})\r\n    }\r\n    handleDragExit(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault()\r\n        this.setState({isDragOver: false})\r\n    }\r\n\r\n    handleDragEnter(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    parseSVG(s) {\r\n        const svg = SVG(s);\r\n        const paths = svg.find('path')\r\n        let pathStrings = []\r\n        console.log(`${paths.length} path elements found.`)\r\n        for (let i = 0; i < paths.length; i++) {\r\n            let p = paths[i];\r\n            pathStrings.push(p.node.attributes.d.nodeValue);\r\n        }\r\n        this.setState({ inputPaths: pathStrings })\r\n    }\r\n\r\n    handleDrop(ev) {\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        this.setState({isDragOver: false})\r\n        if (ev.dataTransfer.items) {\r\n            if (ev.dataTransfer.items[0].kind === 'file') {\r\n                var file = ev.dataTransfer.items[0].getAsFile();\r\n                if (file.type === 'image/svg+xml') {\r\n                    file.text().then(text => { this.parseSVG(text) })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawGrid() {\r\n        this.cg.clear()\r\n        if (this.props.enableGrid) {\r\n            for (let i = 0; i < this.props.resY; i++) {\r\n                let y = (this.props.height / this.props.resY) * i;\r\n                this.cg.polygon([[0, y], [this.props.width, y]]);\r\n            }\r\n            for (let i = 0; i < this.props.resX; i++) {\r\n                let x = (this.props.width / this.props.resX) * i;\r\n                this.cg.polygon([[x, 0], [x, this.props.height]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    processPath(path) {\r\n        let inputPath = this.c.path(path);\r\n        let polygon = inputPath.toPoly(this.props.samples)\r\n        let points = polygon._array;\r\n        let roundedPoints = [];\r\n        let orthogonalPoints = [];\r\n\r\n        // Round points to nearest grid points\r\n        for (let i = 0; i < points.length; i++) {\r\n            let p = points[i];\r\n            let intervalX = this.props.width / this.props.resX\r\n            let intervalY = this.props.height / this.props.resY\r\n            let x = Math.round(p[0] / intervalX) * intervalX;\r\n            let y = Math.round(p[1] / intervalY) * intervalY;\r\n            roundedPoints.push([x, y])\r\n        }\r\n\r\n        // Insert points to ensure right angles \r\n        orthogonalPoints.push(roundedPoints[0])\r\n        let result = []\r\n        for (let i = 1; i < roundedPoints.length; i++) {\r\n            let currentPoint = roundedPoints[i];\r\n            let previousPoint = roundedPoints[i - 1];\r\n            if (currentPoint[0] !== previousPoint[0] && currentPoint[1] !== previousPoint[1]) {\r\n                let newPoint = [currentPoint[0], previousPoint[1]];\r\n                orthogonalPoints.push(newPoint)\r\n                result.push(newPoint.join(','))\r\n            }\r\n            if (currentPoint[0] !== previousPoint[0] || currentPoint[1] !== previousPoint[1]) {\r\n                orthogonalPoints.push(currentPoint)\r\n                result.push(currentPoint.join(','))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    updateBlob() {\r\n        const svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:svgjs=\"http://svgjs.com/svgjs\" width=\"1300\" height=\"660\">' + this.outputDrawing.current.innerHTML + '</svg>';\r\n        const svgBlob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\r\n        this.props.handleSVGBlob(svgBlob)\r\n    }\r\n\r\n    drawResult() {\r\n        this.c.clear()\r\n        let results = []\r\n        for (let i = 0; i < this.state.inputPaths.length; i++) {\r\n            results.push(this.processPath(this.state.inputPaths[i]))\r\n        }\r\n\r\n        this.setState({ outputPolygons: results })\r\n    }\r\n    render() {\r\n        const polygons = this.state.outputPolygons.map((poly, i) => {\r\n            return (<polygon key={i} style={{stroke: 'black'}} className='result' points={poly.join(' ')}></polygon>)\r\n        })\r\n        return (\r\n            <div data-dragover={this.state.isDragOver} onDrop={this.handleDrop} onDragOver={this.handleDragOver} onDragExit={this.handleDragExit} onDragEnter={this.handleDragEnter} className='drawing' id='drawing'>\r\n                <svg className='outputDrawing' ref={this.outputDrawing} width={this.props.width} height={this.props.height}>\r\n                    {polygons}\r\n                </svg>\r\n                <div className='workDrawing' id='workDrawing'></div>\r\n                <div className='drag-overlay'><h2>Drop files anywhere to process</h2></div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './css/Slider.css';\r\n\r\nexport default class Slider extends React.Component {\r\n    render() {\r\n        let valueStyle = {\r\n            left: ((this.props.value / this.props.max) * 100) + '%'\r\n        }\r\n        return (\r\n            <div className='setting slider'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <input className='slider-input' onChange={this.props.changeHandler} name={this.props.id} type='range' min={this.props.min} max={this.props.max} step={this.props.step} value={this.props.value}></input>\r\n                <div style={valueStyle} className='slider-value'>\r\n                    <input className='value-input' onChange={this.props.changeHandler} name={this.props.id} type='number' min={this.props.min} max={this.props.max} step={this.props.step} value={this.props.value}></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './css/Toggle.css'\r\n\r\nexport default class Toggle extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='setting'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <input onChange={this.props.changeHandler} name={this.props.id} type='checkbox' checked={this.props.value}></input>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Slider from './Slider.js';\r\nimport Toggle from './Toggle.js';\r\nimport './Settings.css';\r\n\r\n// const equal = require('fast-deep-equal/es6/react');\r\n\r\nexport default class Settings extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.resultToFile = this.resultToFile.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        const setting = e.target.getAttribute('name');\r\n        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\r\n        this.props.updateSetting(setting, value)\r\n    }\r\n    resultToFile() {\r\n        var svgUrl = URL.createObjectURL(this.props.svgBlob);\r\n        var downloadLink = document.createElement(\"a\");\r\n        downloadLink.href = svgUrl;\r\n        downloadLink.download = \"newesttree.svg\";\r\n        document.body.appendChild(downloadLink);\r\n        downloadLink.click();\r\n        document.body.removeChild(downloadLink);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='settings'>\r\n                <Slider changeHandler={this.handleChange} value={this.props.settings.resX} title='Resolution X' id='resX' min='1' max='300' step='1'></Slider>\r\n                <Slider changeHandler={this.handleChange} value={this.props.settings.resY} title='Resolution Y' id='resY' min='1' max='300' step='1'></Slider>\r\n                <Slider changeHandler={this.handleChange} value={this.props.settings.samples} title='Samples' id='samples' min='10' max='300' step='1'></Slider>\r\n                <Toggle value={this.props.settings.enableGrid} id='enableGrid' changeHandler={this.handleChange} title='Enable Grid'></Toggle>\r\n                <a href='#1' className='btn' onClick={this.resultToFile}>Download SVG</a>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport SVGCanvas from './SVGCanvas.js'\r\nimport Settings from './Settings.js'\r\nimport './css/App.css';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      width: 0,\r\n      height: 0,\r\n      svgBlob: '',\r\n      settings: {\r\n        resX: 145,\r\n        resY: 160,\r\n        samples: 100,\r\n        enableGrid: true\r\n      }\r\n    }\r\n\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\r\n    this.updateSetting = this.updateSetting.bind(this)\r\n    this.handleSVGBlob = this.handleSVGBlob.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  handleSVGBlob(blob) {\r\n    this.setState({ svgBlob: blob })\r\n  }\r\n\r\n  updateSetting(setting, value) {\r\n    console.log(`Updating setting ${setting} to ${value}`);\r\n    this.setState((prevState) => {\r\n      if (prevState.settings[setting] !== null) {\r\n        prevState.settings[setting] = value;\r\n      } else {\r\n        console.error(`Attempted to update non-existing setting ${setting}`)\r\n      }\r\n      return prevState;\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <header className=\"app-header\">\r\n          <h1>Pixelise SVG</h1>\r\n        </header>\r\n        <main className='app-wrap'>\r\n          <SVGCanvas handleSVGBlob={this.handleSVGBlob} width='1300' height='660' samples={this.state.settings.samples} resX={this.state.settings.resX} resY={this.state.settings.resY} enableGrid={this.state.settings.enableGrid}></SVGCanvas>\r\n          <Settings svgBlob={this.state.svgBlob} updateSetting={this.updateSetting} settings={this.state.settings}></Settings>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}